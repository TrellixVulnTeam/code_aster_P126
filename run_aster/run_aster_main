#!/usr/bin/env python3
# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# Imports are differed to show debug informations as soon as possible
# aslint: disable=C4008

"""
    run_aster [options] EXPORT

"""

import argparse
import os
import os.path as osp
import sys

try:
    import ptvsd
    HAS_PTVSD = True
except ImportError:
    HAS_PTVSD = False


try:
    import run_aster
except ImportError:
    root = osp.dirname(osp.dirname(osp.abspath(__file__)))
    lib = osp.join(root, "lib", "aster")
    sys.path.append(lib)

from run_aster.logger import DEBUG, logger


__DOC__ = __doc__


FMT_DIAG = """
------------------------------------------------------------
--- DIAGNOSTIC JOB : {state}
------------------------------------------------------------
"""

def parse_args(argv):
    """Parse command line arguments.

    Arguments:
        argv (list): List of command line arguments.
    """
    # command arguments parser
    parser = argparse.ArgumentParser(
        usage=__DOC__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-g', '--debug', action='store_true',
                        help="print debugging information (same as "
                             "DEBUG=1 in environment)")
    parser.add_argument('-i', '--interactive', action='store_true',
                        help="inspect interactively after running script"
                             "instead of calling FIN command, time limit is "
                             "increased to 24 hours")
    parser.add_argument('--env', action='store_true',
                        help="do not execute, only prepare the working "
                             "directory")
    parser.add_argument('-t', '--test', action='store_true',
                        help="execution of a testcase")
    parser.add_argument('--ctest', action='store_true',
                        help="testcase execution inside ctest (implies '--test')")
    parser.add_argument('-w', '--wrkdir', action='store',
                        help="use this existing directory as working directory")
    parser.add_argument('--ptvsd', action='store', type=int,
                        help="ptvsd port number")
    parser.add_argument('export', metavar='EXPORT',
                        help="Export file defining the calculation.")

    args = parser.parse_args(argv)
    if args.debug:
        logger.setLevel(DEBUG)
    if args.env and not args.wrkdir:
        parser.error("Argument '--wrkdir' is required if '--env' is enabled")
    return args


def main(argv=None):
    """Entry point for code_aster runner.

    Arguments:
        argv (list): List of command line arguments.
    """
    args = parse_args(argv or sys.argv[1:])
    from run_aster.export import Export, File
    from run_aster.run import RunAster, temporary_dir

    if args.ptvsd:
        print('Waiting for debugger attach...'),
        ptvsd.enable_attach(address=('127.0.0.1', args.ptvsd))
        ptvsd.wait_for_attach()
        ptvsd.break_into_debugger()

    export = Export(args.export, check=False)
    # args to parameters
    if args.test or args.ctest:
        export.set_parameter("actions",
                             export.get("actions", []) + ["make_test"])
        if args.ctest:
            basename = osp.splitext(osp.basename(args.export))[0]
            mess = File(osp.join(osp.abspath("Testing"), basename + ".mess"),
                        filetype="mess", unit=6, resu=True)
            export.add_file(mess)
    if args.env:
        export.set_parameter("actions",
                             export.get("actions", []) + ["make_env"])
    if args.interactive:
        export.set_parameter("interact", True)
        export.set_time_limit(86400.)
    export.check()

    calc = RunAster.factory(export)
    if args.wrkdir:
        os.chdir(args.wrkdir)
        status = calc.execute()
    else:
        with temporary_dir():
            status = calc.execute()
    logger.info(FMT_DIAG.format(state=status.diag))
    return status.exitcode


if __name__ == '__main__':
    sys.exit(main())
