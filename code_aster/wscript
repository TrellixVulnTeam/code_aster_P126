# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2019 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os
import os.path as osp
from pprint import pformat
import shutil

from waflib import Context, Configure, Errors


def options(self):
    self.load('cython')
    group = self.get_option_group("code_aster options")
    group.add_option('--disable-cython', dest='enable_cython',
                     default=None, action='store_false',
                     help='disable the Cython support')
    group.add_option('--enable-cython', dest='enable_cython',
                     default=None, action='store_true',
                     help='force the Cython support')


def configure(self):
    opts = self.options
    self.env.BUILD_CYTHON = False
    try:
        self.check_cython()
    except Errors.ConfigurationError as exc:
        if opts.enable_cython is True:
            raise
        self.define('_DISABLE_CYTHON', 1)
        self.undefine('HAVE_CYTHON')
    else:
        self.define('HAVE_CYTHON', 1)
        self.env.BUILD_CYTHON = True

@Configure.conf
def check_cython(self):
    opts = self.options
    if opts.enable_cython is False:
        raise Errors.ConfigurationError('Cython disabled')

    self.load('cython')
    self.start_msg('Checking for Cython version')
    try:
        output = self.cmd_and_log(self.env['CYTHON'] + ['--version'],
                                    output=Context.STDERR)
        self.end_msg(output.strip())
    except:
        self.end_msg('failed - Cython support disabled', 'YELLOW')
        raise Errors.ConfigurationError()

def build(self):
    get_srcs = self.path.get_src().ant_glob
    env = self.all_envs[self.variant]

    self(
        features = 'py',
            name = 'code_aster_py',
          source = get_srcs('**/*.py'),
    install_from = '.',
    install_path = osp.join(env.ASTERLIBDIR, "code_aster"),
    )

    self(
        features = 'subst py',
            name = 'aster_version',
          source = 'aster_version.pytmpl',
          target = 'aster_version.py',
    install_path = osp.join(env.ASTERLIBDIR, "code_aster", "Cata"),
             use = ['bibpyt'],
    VERSION_INFO = pformat(env['ASTER_VERSION']),
    )

    # cython
    if self.env.BUILD_CYTHON:
        build_cython_ext(self)

def build_cython_ext(self):
    get_srcs = self.path.get_src().ant_glob
    env = self.all_envs[self.variant]
    uses = env['all_dependencies']

    # Wrappers on C++ objects uses libaster
    wrapper = get_srcs('**/*.pyx')
    for cymodule in wrapper:
        path = cymodule.abspath()
        modname = osp.splitext(osp.basename(path))[0]
        dirname = osp.basename(osp.dirname(path))

        self(
            features = 'cxx cxxshlib pyext',
              source = cymodule,
              target = osp.join(dirname, modname),
                 use = ['asterlib', 'CODE_ASTER_CORE'],
        install_path = osp.join(env.ASTERLIBDIR, 'code_aster', dirname),
        )

@Configure.conf
def check_optimization_cython(self):
    self.setenv('debug')
    self.env.append_unique('CYTHONFLAGS', ["-3", "-a"])
    self.setenv('release')
    self.env.append_unique('CYTHONFLAGS', ["-3"])
