# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

# UTILISATION : COMPARAISON DE LA SIMULATION NUMERIQUE D'UN ASSEMBLAGE
#               COMBUSTIBLE EN COMPRESSION AVEC LES RESULTATS EXPERIMENTAUX

DEBUT(CODE=_F(NIV_PUB_WEB='INTRANET'),IMPR_MACRO='NON',)

import numpy as np

tabn = LIRE_TABLE(UNITE      = 38,
                  FORMAT     = 'LIBRE',
                  SEPARATEUR = '\t')

MA1 = LIRE_MAILLAGE(FORMAT = 'MED',
                    UNITE = 20)

COMPR = CALC_MAC3COEUR(TYPE_COEUR  = 'MONO_FROID',
                       TABLE_N     =  tabn,
                       MAILLAGE_N  =  MA1,
                       TYPE_DEFORMATION = 'PETIT',
                       DEFORMATION = _F(UNITE_THYC   = 32,
                                        NIVE_FLUENCE = 0.,
                                        TYPE_MAINTIEN = 'FORCE',
                                        FORCE_MAINTIEN = 39950.4,
                                        ARCHIMEDE      = 'NON',
                       ))

COMPR = CALC_CHAMP(reuse  = COMPR,
                   RESULTAT = COMPR,
                   FORCE = ('FORC_NODA',),)

COMP_CH = LIRE_FONCTION(UNITE = 21,
                        NOM_PARA = 'DX',
                        PROL_DROITE = 'CONSTANT',
                        PROL_GAUCHE = 'CONSTANT',)

COMP_DCH = LIRE_FONCTION(UNITE = 22,
                         NOM_PARA = 'DX',
                         PROL_DROITE = 'CONSTANT',
                         PROL_GAUCHE = 'CONSTANT',)


POST1 = POST_RELEVE_T(ACTION = _F(OPERATION = 'EXTRACTION',
                                  INTITULE = 'DX',
                                  RESULTAT  = COMPR,
                                  NOM_CHAM  = 'DEPL',
                                  GROUP_NO = 'PEBO_S',
                                  NOM_CMP = 'DX',))

POST2 = POST_RELEVE_T(ACTION = _F(OPERATION = 'EXTRACTION',
                                  INTITULE = 'FORCES',
                                  RESULTAT = COMPR,
                                  NOM_CHAM = 'FORC_NODA',
                                  GROUP_NO = ('PMNT_S'),
                                  RESULTANTE = ('DX','DY','DZ'),
                                  REPERE = 'GLOBAL'))

POST3= POST_RELEVE_T(ACTION = _F(OPERATION = 'MOYENNE',
                                 INTITULE = 'DX',
                                 RESULTAT = COMPR,
                                 NOM_CHAM = 'DEPL',
                                 GROUP_NO = ('GRIL_10'),
                                 NOM_CMP = ('DX',)))

POST3 = CALC_TABLE(reuse = POST3,
                   TABLE = POST3,
                   ACTION = _F(OPERATION='FILTRE',
                               NOM_PARA='QUANTITE',
                               VALE_K='MOMENT_0'))


dx_exp_ch, force_exp_ch = COMP_CH.Valeurs()
dx_exp_dch, force_exp_dch = COMP_DCH.Valeurs()

inst = POST1.EXTR_TABLE().INST.values()
dx_calc = np.array(POST1.EXTR_TABLE().DX.values())
dx_calc = -1.*(dx_calc - dx_calc[2]) # on decale sur 0. l'origine de la table POST1  pour retrancher le deplacement du a la pesanteur.

force_calc = np.array(POST2.EXTR_TABLE().DX.values())
force_calc*=-1

# Selection de la partie charge
idx_min_ch = 5
idx_max_ch = 16

inst_ch = inst[idx_min_ch:idx_max_ch]
dx_ch = dx_calc[idx_min_ch:idx_max_ch]
force_ch = force_calc[idx_min_ch:idx_max_ch]

# Selection de la partie decharge
idx_min_dch = 109
idx_max_dch = 130

inst_dch = inst[idx_min_dch:idx_max_dch]
dx_dch = dx_calc[idx_min_dch:idx_max_dch]
force_dch = force_calc[idx_min_dch:idx_max_dch]

# Calcul de la difference avec l'essai
dx_exp_ch_interp = np.interp(force_ch, force_exp_ch,dx_exp_ch)
diff_dx_ch = np.around(dx_ch - dx_exp_ch_interp,12)
dx_exp_dch_interp = np.interp(force_dch, force_exp_dch,dx_exp_dch)
diff_dx_dch = np.around(dx_dch - dx_exp_dch_interp,12)

TAB = CREA_TABLE(LISTE=(
    _F(PARA = 'INST',
       LISTE_R = list(inst_ch) + list(inst_dch)),
    _F(PARA = 'DX',
       LISTE_R = list(dx_ch) + list(dx_dch)),
    _F(PARA = 'FX',
       LISTE_R = list(force_ch) + list(force_dch)),
    _F(PARA = 'DX_EXP',
       LISTE_R = list(dx_exp_ch_interp) + list(dx_exp_dch_interp)),
    _F(PARA = 'DELTA_DX',
       LISTE_R = list(diff_dx_ch) + list(diff_dx_dch)),
))

DEPLC = RECU_FONCTION(TABLE=TAB,
                      PARA_X='INST',
                      PARA_Y='DX',
                      PROL_DROITE='CONSTANT',
                      PROL_GAUCHE='CONSTANT',)

FORCC = RECU_FONCTION(TABLE=TAB,
                      PARA_X='INST',
                      PARA_Y='FX',
                      PROL_DROITE='CONSTANT',
                      PROL_GAUCHE='CONSTANT',)

IMPR_FONCTION(FORMAT='XMGRACE',UNITE=29,
              COURBE=(_F(FONCTION=COMP_CH ,LEGENDE='Essai compression : Charge'  ,MARQUEUR =   0,COULEUR =    2,STYLE = 1,),
                      _F(FONCTION=COMP_DCH,LEGENDE='Essai compression : Decharge',MARQUEUR =   0,COULEUR =    2,STYLE = 1,),
                      _F(FONC_X=DEPLC,FONC_Y=FORCC,LEGENDE='Calcul',MARQUEUR =   0,COULEUR =    4,STYLE = 1,),
                      ),
              BORNE_X=(0.,2.E-3),BORNE_Y=(0.,50000.),ECHELLE_X='LIN',ECHELLE_Y='LIN',GRILLE_X=0.2E-3,GRILLE_Y=10000.,LEGENDE_X='DX(mm)',LEGENDE_Y='Effort (N)',
              TITRE='Recalage essai de compression AFA3GLRAA_N4',)
   
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.3,   VALE_CALC=9.992563368657292e-05, VALE_REFE=9.293159310850446e-05, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=5.500E-4,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.035, VALE_CALC=0.0005061651355229852, VALE_REFE=0.0005070594698652454, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=7.500E-4,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.02,  VALE_CALC=0.0006441901890387009, VALE_REFE=0.0006380997288006115, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=8.000E-4,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.045, VALE_CALC=0.0009361008771229159, VALE_REFE=0.000905484035476719, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=9.000E-4,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.025, VALE_CALC=0.0012439221535353103, VALE_REFE=0.0012289999999999996, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=1.000E-3,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.04,  VALE_CALC=0.0011439965198487198, VALE_REFE=0.0011292524597269352, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=8.050E-3,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.06,  VALE_CALC=0.0010440708861621073, VALE_REFE=0.0010360530590043692, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=8.1E-3,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.09,  VALE_CALC=0.0008442196187888819, VALE_REFE=0.0008384712022544863, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=8.2E-3,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.09,  VALE_CALC=0.0006443683514156565, VALE_REFE=0.0006455311643835452, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=8.3E-3,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.18,  VALE_CALC=0.00044451708404243107, VALE_REFE=0.0004474831823881624, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=8.400E-3,),)
TEST_TABLE(CRITERE='RELATIF',REFERENCE='SOURCE_EXTERNE',PRECISION=0.255, VALE_CALC=0.00024466581666923346, VALE_REFE=0.0002338, NOM_PARA='DX',TABLE=TAB,FILTRE=_F(NOM_PARA='INST',VALE=8.500E-3,),)

TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=3995.04, VALE_REFE=3995,  NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=5.500E-4, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=19975.20, VALE_REFE=19975,  NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=7.500E-4, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=23970.24, VALE_REFE=23970, NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=8.000E-4, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=31960.32, VALE_REFE=31960, NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=9.000E-4, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=39950.4, VALE_REFE=39950, NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=1.000E-3, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=35955.36, VALE_REFE=35955, NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=8.050E-3, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=31960.32, VALE_REFE=31960, NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=8.1E-3, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=23970.24, VALE_REFE=23970, NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=8.2E-3, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=15980.16, VALE_REFE=15980, NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=8.3E-3, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=7990.08, VALE_REFE=7990, NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=8.4E-3, ), )
TEST_FONCTION(VALEUR=_F(CRITERE='ABSOLU', REFERENCE='SOURCE_EXTERNE', PRECISION=0.5, VALE_CALC=0.0, VALE_REFE=0.0, NOM_PARA='DX', FONCTION=FORCC, VALE_PARA=8.500E-3, ), )

FIN()
