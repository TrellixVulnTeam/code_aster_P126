# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os
import os.path as osp
from distutils.version import LooseVersion

from waflib import Configure, Errors, Utils

def options(self):
    self.load('compiler_cxx')
    self.load('boost')

    group = self.get_option_group("code_aster options")
    # boost tool failed for example with libboost_python3-mt.1.58.0
    # truncated as boost_python3-mt.1.58 by boost_get_libs.format_lib_name...
    group.add_option('--disable-boost-check', dest='disable_boost_check',
                     action='store_true',
                     default=os.environ.get('DISABLE_BOOST_CHECK'),
                     help='do not check boost (INCLUDES_BOOST, LIBPATH_BOOST, '
                          'LIB_BOOST must be defined in environment, same as '
                          'DISABLE_BOOST_CHECK environment variable)')

def configure(self):
    self.load('compiler_cxx')
    self.check_cxx_compiler_flags()
    if 'icc' not in self.env.CC_NAME:
        self.check_bibcxx_depends()
    self.check_boost_aster()

    cxxpath = self.path.get_src().abspath()
    self.env.append_value('INCLUDES_BIBCXX', cxxpath)

    incpath = osp.join(cxxpath, 'include')
    self.env.append_value('INCLUDES_BIBCXX', incpath)

    cpath = self.path.find_node('../bibc').abspath()
    incpath = osp.join(cpath, 'include')
    self.env.append_value('INCLUDES_BIBCXX', incpath)

def build(self):
    env = self.all_envs[self.variant]
    get_srcs = self.path.get_src().ant_glob

    if env.BUILD_MFRONT:
        paths = get_srcs('mfront', src=True, dir=True)
        paths = [d.abspath() for d in paths]
        env.append_value('INCLUDES', paths)
        self(
            features = 'cxx',
                name = 'astermfront',
              source = get_srcs('mfront/*.cxx'),
                 env = env.derive(),
                 use = ['BIBCXX', 'MFRONT', 'BOOST', 'PYEXT', 'CXX'],
            )

    self(
        features = 'cxx cxxshlib',
            name = 'asterbibcxx',
          source = get_srcs('**/*.cxx', excl='mfront/*.cxx'),
          target = 'bibcxx',
             use = ['BIBCXX', 'PETSC', 'BOOST', 'PYEXT', 'CXX'],
             env = env.derive(),
    install_path = env.ASTERLIBDIR
    )

###############################################################################
@Configure.conf
def check_bibcxx_depends(self):
    """check dependencies of bibcxx"""
    self.check_cxx(uselib_store='CXX', lib='stdc++')

@Configure.conf
def check_cxx_compiler_flags(self):
    """check C++ compiler flags"""
    # this option is compiler independent (ifort & g++)
    self.check_cxx(cxxflags='-std=c++11', uselib_store='CXX', mandatory=False)

@Configure.conf
def check_optimization_cxxflags(self):
    self.setenv('debug')
    self.define('_DEBUG_CXX', 1)
    self.remove_optflags("CXXFLAGS")
    flags = ['-g', '-O0'] + Utils.to_list(self.env['CXXFLAGS_ASTER_DEBUG'])
    self.start_msg('Setting C++ debug flags')
    self.env.append_unique('CXXFLAGS', flags)
    self.end_msg(flags)

    self.setenv('release')
    flags = ['-O2']
    self.start_msg('Setting C++ optimization flags')
    self.env.append_unique('CXXFLAGS', flags)
    self.end_msg(flags)

@Configure.conf
def check_boost_aster(self):
    self.load('boost')
    if not self.options.disable_boost_check:
        self.check_boost(lib="python", toolset='cxx')
    else:
        for part in ('INCLUDES', 'LIBPATH', 'LIB'):
            self.add_os_flags(part + '_BOOST')
