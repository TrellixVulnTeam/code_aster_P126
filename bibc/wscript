# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2018 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

import os.path as osp
import sys
import optparse
from functools import partial

from waflib import TaskGen, Configure, Logs, Utils, Errors

def options(self):
    self.load('compiler_c')
    group = self.get_option_group("code_aster options")
    group.add_option('-e', '--build-executable', dest='embed_aster',
                    default=False, action='store_true',
                    help='build aster as an executable: it is an alias for --embed-aster')
    group.add_option('--embed-aster', dest='embed_aster',
                    default=True, action='store_true',
                    help='embed all aster components within a python interpreter')
    group.add_option('--shared-aster', dest='embed_aster',
                    default=True, action='store_false',
                    help='build each aster component as a shared python module')

def configure(self):
    self.load('compiler_c')
    opts = self.options
    # preserve symbols in the dyn table for stdcalls
    if sys.platform != 'darwin':
        self.env.append_unique('LINKFLAGS', ['-Wl,--export-dynamic'])
    else:
        # '--export-dynamic' is '-export_dynamic' in OS X linker
        # http://stackoverflow.com/questions/21279036/what-is-clangs-equivalent-to-rdynamic-gcc-flag
        self.env.append_unique('LINKFLAGS', ['-Wl,-export_dynamic'])

    incpath = osp.join(self.path.get_src().abspath(), 'include')
    self.env.append_value('INCLUDES', incpath)

    if opts.embed_all or opts.embed_aster:
        self.env.append_value('ASTER_EMBEDS', ['bibc'])
    if 'ifort' in self.env.FC_NAME.lower():
        self.env.append_value('LINKFLAGS_fcprogram', ['-nofor_main'])
        if opts.embed_all or opts.embed_aster:
            self.env.append_value('LINKFLAGS_fcprogram', ['-static-intel'])
            if self.get_define('HAVE_MPI'):
                self.env.append_value('LINKFLAGS_fcprogram', ['-static_mpi'])
    self.check_cflags()
    self.check_bibc_depends()

@Configure.conf
def check_bibc_depends(self):
    """check dependencies of bibc"""
    # never in static
    self.check_cc(uselib_store='SYS', lib='dl')

PYMAIN = 'supervis/python.c'

def build(self):
    # The build is splitted in 3 stages:
    # - compilation of C source files
    # - build of the shared lib (libaster)
    # - build and link the cython wrapper
    #
    get_srcs = self.path.get_src().ant_glob
    env = self.all_envs[self.variant]
    excl = [] if env.BUILD_MED else ['**/med_aster_module.c']

    build_c_source(self, env, excl)
    build_libaster(self, env)

    self.add_group()
    # install headers
    self.install_files(
        env.ASTERINCLUDEDIR,
        get_srcs('include/*.h')
    )
    # install generated headers (C + fortran)
    bld = self.path.get_bld().parent
    config_includes = bld.ant_glob('aster*_config.h', quiet=True)
    self.install_files(
        env.ASTERINCLUDEDIR,
        config_includes
    )

@TaskGen.extension('.h')
def process_h(self, node):
    pass

def build_c_source(self, env, excl):
    get_srcs = self.path.get_src().ant_glob
    uses = env['all_dependencies']
    # compile *.c
    self(
        features = 'c',
            name = 'asterbibc',
          source = get_srcs('**/*.c', excl=excl + [PYMAIN]),
         defines = '',
             env = env.derive(),
             use = ['PYEMBED', 'NUMPY'] + uses,
    )

def build_libaster(self, shenv):
    get_srcs = self.path.get_src().ant_glob
    uses = shenv['all_dependencies']
    if shenv.BUILD_MFRONT:
        uses.append('astermfront')
    # {bibfor, bibc, bibcxx}/*.o
    if sys.platform != 'darwin':
        libasterfor = ['asterbibfor']
    else:
        # OS X does not support more than 262144 bytes on a single command line (getconf ARG_MAX)
        # To prevent "argument list too long" error (more than 7000 object files from Fortran), we need to split the archive
        libasterfor = ['asterbibfor1' , 'asterbibfor2' , 'asterbibfor3']
        # XXX try: OPTLIB_FLAGS="--whole-archive -llibbibfor1..."
    self(
        features = 'cxx cxxshlib',
            name = 'asterlib',
          target = 'aster',
          source = PYMAIN,
         defines = '_MAIN_=_unused_main_', #'_WITHOUT_PYMOD_',
             env = shenv.derive(),
             use = ['PYEMBED', 'NUMPY'] + libasterfor + ['asterbibc',
                    'asterbibcxx', 'CODE_ASTER_CORE'] + uses + ['CXX'],
    install_path = shenv.ASTERLIBDIR,
    )

@Configure.conf
def check_cflags(self):
    self.start_msg('Getting C compiler flags')
    if 'icc' in self.env.CC_NAME:
        self.safe_remove('CFLAGS_PYEXT', '-fwrapv')
        self.safe_remove('CFLAGS_PYEMBED', '-fwrapv')
        self.safe_remove('CXXFLAGS_PYEXT', '-fwrapv')
        self.safe_remove('CXXFLAGS_PYEMBED', '-fwrapv')
    self.end_msg(self.env['CFLAGS'])

@Configure.conf
def check_optimization_cflags(self):
    self.setenv('debug')
    self.remove_optflags("CFLAGS")
    flags = ['-g', '-O0'] + Utils.to_list(self.env['CFLAGS_ASTER_DEBUG'])
    self.start_msg('Setting C debug flags')
    self.env.append_unique('CFLAGS', flags)
    self.end_msg(flags)

    self.setenv('release')
    flags = ['-O2']
    self.start_msg('Setting C optimization flags')
    self.env.append_unique('CFLAGS', flags)
    self.end_msg(flags)
