# coding=utf-8
# --------------------------------------------------------------------
# Copyright (C) 1991 - 2020 - EDF R&D - www.code-aster.org
# This file is part of code_aster.
#
# code_aster is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# code_aster is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with code_aster.  If not, see <http://www.gnu.org/licenses/>.
# --------------------------------------------------------------------

"""
Build some data files (dest: share/aster)

- 'config.js': needed by run_aster.
- 'config.txt': needed by as_run (for MACR_RECAL).
- 'create_install_script': script to use a containerized version.
- 'CTestTestfile.cmake': used to run testcases with 'ctest'.
- 'execute_codeaster': used as executable for a containerized version.
- 'external_programs.js': definition of external programs called from code_aster.
- 'mpirun_template': template for MPI execution.
- 'post_install': update some paths after moving the installed files.
- 'profile.sh': environment script.
- 'reca_main.py': script to call MACR_RECAL from Python.
- 'run_aster': script that executes code_aster.
- 'un_ctest': script that executes a list of testcases using 'ctest'.
"""

import getpass
import json
import os
import os.path as osp
import pickle
import re
import sys
from glob import glob
from itertools import chain

from waflib import Configure, Errors, Logs, Utils


def options(self):
    group = self.get_option_group("code_aster options")
    # default=False in libaster, True in code_aster
    group.add_option('--legacy', dest='legacy',
                     default=True, action='store_true',
                     help='create some legacy files')
    group.add_option('--nolegacy', dest='legacy',
                     action='store_false',
                     help='do not create legacy files')
    group.add_option('--singularity-image', dest='singularityimage',
                     default=None, action='store',
                     help='Singularity image used for executions')

    group = self.get_option_group("Configuration options")
    group.add_option('--with-data', dest='with_data',
                     action='store', default=None,
                     help='location of the data repository (default: ../data)')

    group = self.add_option_group('External programs options')
    group.add_option('--with-prog-gmsh', action='store_true', default=None,
                     dest='with_prog_gmsh',
                     help='Force support of gmsh program')
    group.add_option('--with-prog-salome', action='store_true', default=None,
                     dest='with_prog_salome',
                     help='Force support of salome program')
    group.add_option('--with-prog-run_miss3d', action='store_true',
                     default=None,
                     dest='with_prog_run_miss3d',
                     help='Force support of miss3d program')
    group.add_option('--with-prog-homard', action='store_true', default=None,
                     dest='with_prog_homard',
                     help='Force support of homard program')
    group.add_option('--with-prog-ecrevisse', action='store_true',
                     default=None,
                     dest='with_prog_ecrevisse',
                     help='Force support of ecrevisse program')
    group.add_option('--with-prog-xmgrace', action='store_true', default=None,
                     dest='with_prog_xmgrace',
                     help='Force support of xmgrace program')
    group.add_option('--with-prog-gracebat', action='store_true', default=None,
                     dest='with_prog_gracebat',
                     help='Force support of gracebat program')
    group.add_option('--with-prog-mfront', action='store_true', default=None,
                     dest='with_prog_mfront',
                     help='Force support of mfront program')
    group.add_option('--with-prog-mdump', action='store_true', default=None,
                     dest='with_prog_mdump',
                     help='Force support of mdump program')


def configure(self):
    self.add_os_flags('ADDMEM')
    self.env.legacy = self.options.legacy
    self.env.singularityimage = self.options.singularityimage
    if self.env.singularityimage:
        self.start_msg('Singularity image')
        self.end_msg(self.env.singularityimage)

    self.check_config()
    self.check_external_programs()
    self.configure_data()

    dict_conv = self.env2dict(osp.dirname(self.path.abspath()))
    self.env['ASTER_ENVIRON'] = pickle.dumps(dict_conv)

@Configure.conf
def configure_data(self):
    opts = self.options
    self.start_msg("Checking for 'data' repository")
    self.env.data_path = None

    default = osp.join(self.path.parent.parent.abspath(), 'data')
    data_path = osp.abspath(opts.with_data or default)
    if osp.isdir(data_path):
        self.end_msg(data_path)
        self.env.data_path = data_path
    elif opts.with_data is None:
        self.end_msg("{0} not found".format(data_path), 'YELLOW')
    else:
        raise Errors.ConfigurationError("{0} not found".format(data_path))


def build(self):
    # src/srcbin distinction exists for exec mode (644 vs 755)
    src = ['CTestTestfile.cmake.tmpl', 'external_programs.js.tmpl',
           'config.js.tmpl']
    tgt = ['CTestTestfile.cmake', 'external_programs.js',
            'config.js']
    if self.env.legacy:
        src.extend(['config.txt.tmpl', 'profile.sh.tmpl'])
        tgt.extend(['config.txt', 'profile.sh'])
    srcbin = ['execute_codeaster.tmpl', 'create_install_script',
              'reca_main.py']
    tgtbin = ['execute_codeaster', 'create_install_script',
              'reca_main.py']
    try:
        dict_conv = pickle.loads(self.env['ASTER_ENVIRON'])
    except:
        Logs.error("ASTER_ENVIRON not found. Please run 'waf configure...'")
        raise Errors.BuildError
    dict_conv['PROGRAMS_JSON'] = dict_to_json(self.env['EXTERNAL_PROGRAMS'])
    dict_conv['CONFIG_JSON'] = dict_to_json(self.env['CONFIG_PARAMETERS'])
    change_tests(dict_conv, self.env.install_tests)
    self(
        features='subst',
        name='data_files',
        source=src,
        target=tgt,
        install_path=self.env.ASTERDATADIR,
        vars=['ASTER_ENVIRON', 'CONFIG_PARAMETERS', 'EXTERNAL_PROGRAMS',
              'install_tests'],
        **dict_conv
    )
    self(
        features='subst',
        name='data_files',
        source=srcbin,
        target=tgtbin,
        install_path=self.env.ASTERDATADIR,
        vars=['ASTER_ENVIRON', 'CONFIG_PARAMETERS', 'EXTERNAL_PROGRAMS',
              'install_tests'],
        chmod=Utils.O755,
        **dict_conv
    )
    if self.env.singularityimage:
        self.symlink_as("${PREFIX}/share/aster/image",
                        self.env.singularityimage)

    # without substitution
    self.install_files(self.env.BINDIR,
                       [self.path.get_src().find_node(src)
                        for src in ("post_install", "run_aster", "run_ctest")],
                       chmod=Utils.O755)
    self.install_files(self.env.ASTERDATADIR,
                       self.path.get_src().find_node("mpirun_template"),
                       chmod=Utils.O644)
    # install files from data repository
    if self.env.data_path:
        data_path = osp.relpath(self.env.data_path,
                                self.path.get_src().abspath())
        data_node = self.path.get_src().find_node(data_path)

        dest = osp.join(self.env.ASTERDATADIR, 'datg')
        files = data_node.ant_glob('datg/*.datg')
        self.install_files(dest, files)

        dest = osp.join(self.env.ASTERDATADIR, 'materiau')
        files = data_node.ant_glob('materiau/*.NOMI')
        self.install_files(dest, files)

        dest = osp.join(self.env.ASTERDATADIR, 'tests_data')
        files = data_node.ant_glob('tests_data/*')
        self.install_files(dest, files)


SRCTEST_TMPL = """SRCTEST        | src     | -     | %s"""


@Configure.conf
def env2dict(self, src):
    """build dict informations"""
    # should not set any value to "env"
    self.start_msg('Store execution environment')
    env = self.env.derive()
    env['LD_LIBRARY_PATH'] = os.environ.get(
        'LD_LIBRARY_PATH', '').split(os.pathsep)
    ld_path = self.remove_duplicates(
        chain(*[Utils.to_list(env[name]) for name in (
            'LIBPATH', 'LIBDIR', 'LD_LIBRARY_PATH', 'ASTERLIBDIR')
            if env[name]]))
    sep = os.pathsep + '\\\n'
    dico = {}
    dico['DEFINES'] = ' '.join([d.split('=')[0] for d in env['DEFINES']])
    py_path = self.remove_duplicates(Utils.to_list(env['CFG_PYTHONPATH']))
    dico['PYTHONHOME'] = env['CFG_PYTHONHOME']
    dico['PYTHON_DIRNAME'] = osp.dirname(env['PYTHON'][0])
    # as_run compatibility
    if env.ASRUN_MPI_VERSION:
        dico['DEFINES'] += ' _USE_MPI'
    dico['LD_LIBRARY_PATH'] = sep.join(ld_path)
    dico['CFG_PYTHONPATH'] = sep.join(py_path)
    dico['CFG_MPIRUNPATH'] = env['CFG_MPIRUNPATH']
    dico['SRC'] = src
    dico['FC'] = env.FC[0]
    flags = [' '.join(env[i])
             for i in list(env.keys()) if i.startswith('FCFLAGS')]
    dico['FCFLAGS'] = ' '.join(flags)
    dico['OPT_ENV'] = env['OPT_ENV'] and os.linesep.join(env['OPT_ENV']) or ''
    dico['OPT_ENV_FOOTER'] = env['OPT_ENV_FOOTER'] \
        and os.linesep.join(env['OPT_ENV_FOOTER']) or ''
    dico['ADDMEM'] = env['ADDMEM']
    dico['srctest'] = os.linesep.join([
        SRCTEST_TMPL % '%(SRC)s/astest' % dico,
        SRCTEST_TMPL % '%(SRC)s/../validation/astest' % dico])
    text = ""
    if env['MFRONT']:
        tfel = osp.dirname(osp.dirname(env['MFRONT'][0]))
        text += os.linesep.join([
            "# MFront specific",
            "export TFELHOME={}".format(tfel),
            "export PATH=${TFELHOME}/bin:$PATH"
        ])
    dico['MFRONT_SPECIFIC'] = text
    dico['ASRUN_TMPDIR_CMAKE'] = env.ASRUN_TMPDIR_CMAKE
    dico['ASTERDATADIR'] = env['ASTERDATADIR']
    dico['ASTER_TAG'] = '.'.join([str(i) for i in env['ASTER_VERSION'][0]])
    dico['BIN_NODBG'] = '{PREFIX}/bin/aster{astervers}'.format(**env)
    dico['BIN_DBG'] = '{PREFIX}/bin/asterd{astervers}'.format(**env)
    if env.singularityimage:
        dico['BIN_NODBG'] = 'execute_codeaster'
        dico['BIN_DBG'] = 'execute_codeaster'
        dico['BIND_PREFIX'] = '--bind @PREFIX@:@PREFIX@'
    else:
        dico['BIND_PREFIX'] = ''
    self.end_msg("yes")

    self.start_msg('Build list of testcases')
    valid = osp.join(src, '..', 'validation')
    testdef = _build_def(env.BINDIR, env.ASTERDATADIR,
                         glob(osp.join(src, "astest", "*.export")))
    testdef += _build_def(env.BINDIR, env.ASTERDATADIR,
                          glob(osp.join(valid, "astest", "*.export")))
    dico['ASTER_TEST_DEFINITION'] = testdef
    self.end_msg("done")
    return dico


def dict_to_json(dict_values):
    """Format a dict of values to JSON."""
    return json.dumps(dict_values, sort_keys=True, indent=4,
                      separators=(',', ': '))

CTEST_DEF = """
set(TEST_NAME ${{COMPONENT_NAME}}_{testname})
add_test(${{TEST_NAME}} {BINDIR}/run_aster --ctest {ASTERDATADIR}/tests/{testname}.export)
set_tests_properties(${{TEST_NAME}} PROPERTIES
                     LABELS "${{COMPONENT_NAME}} {labels}"
                     PROCESSORS {processors})
"""

@Configure.conf
def _build_def(bindir, datadir, lexport):
    re_list = re.compile("P +testlist +(.*)$", re.M)
    re_nod = re.compile("P +mpi_nbnoeud +([0-9]+)", re.M)
    re_mpi = re.compile("P +mpi_nbcpu +([0-9]+)", re.M)
    re_thr = re.compile("P +ncpus +([0-9]+)", re.M)
    text = []
    for exp in lexport:
        if not osp.isfile(exp):
            print(f"no such file: {exp}")
            continue
        testname = osp.splitext(osp.basename(exp))[0]
        lab = []
        nod = 1
        mpi = 1
        thr = 1
        with open(exp, "r") as fobj:
            export = fobj.read()
        mat = re_list.search(export)
        if mat:
            lab = mat.group(1).split()
        mat = re_nod.search(export)
        if mat:
            nod = int(mat.group(1))
        mat = re_mpi.search(export)
        if mat:
            mpi = int(mat.group(1))
        mat = re_thr.search(export)
        if mat:
            thr = int(mat.group(1))
        lab.append(f"nodes={nod:02d}")
        text.append(CTEST_DEF.format(testname=testname,
                                     labels=" ".join(sorted(lab)),
                                     processors=mpi * thr,
                                     ASTERDATADIR=datadir,
                                     BINDIR=bindir))
    return "\n".join(text)

def change_tests(dico, install_tests):
    """Because install_tests can be added at build stage"""
    if install_tests:
        dico['srctest'] = SRCTEST_TMPL % '$ASTER_VERSION_DIR/tests'


@Configure.conf
def check_config(self):
    # Check for configuration parameters of the version
    cfg = {}
    self.start_msg("Set parameters for 'config.js'")
    tmpdir = "/tmp"
    # cmake syntax
    tmpdir_cmake = "$ENV{ASTER_TMPDIR}"
    if os.environ.get('ASTER_TMPDIR'):
        tmpdir = os.environ['ASTER_TMPDIR']
    self.env.ASRUN_TMPDIR_CMAKE = tmpdir or tmpdir_cmake
    cfg["tmpdir"] = tmpdir

    try:
        addmem = self.env['ADDMEM']
        if addmem and type(addmem) in (list, tuple):
            addmem = addmem[0]
        self.env['ADDMEM'] = int(addmem)
    except TypeError:
        self.env['ADDMEM'] = 1024
    cfg["addmem"] = self.env.ADDMEM
    cfg["version_tag"] = ".".join([str(i) for i in self.env.ASTER_VERSION[0]])
    cfg["version_sha1"] = self.env.ASTER_VERSION[1]
    cfg["python"] = list(self.env.PYTHON)[0]
    cfg["parallel"] = int(self.get_define('HAVE_MPI') or 0)
    cfg["only-proc0"] = 0
    self.env["base_mpirun"] = ["mpirun"]
    if cfg["parallel"]:
        self.check_mpirun()
        self.check_mpirun_rank()
    cfg.update(self._extract_keys("CFGJS_"))
    cfg["FC"] = self.env["FC"][0]
    cfg["FCFLAGS"] = self.env["FCFLAGS"]
    cfg["exectool"] = {}
    self.end_msg("done")
    from_wafcfg = self.env["CONFIG_PARAMETERS"] or {}
    for param in ("tmpdir", "addmem", "python", "mpirun", "mpirun_rank",
                  "only-proc0", "exectool"):
        if cfg.get(param):
            self.start_msg(f". use '{param}'")
            cfg[param] = from_wafcfg.get(param, cfg[param])
            self.end_msg(str(cfg[param]))
    self.env["CONFIG_PARAMETERS"] = cfg


@Configure.conf
def check_mpirun(self):
    if self.env["mpirun"]:
        self.start_msg("Check for mpirun command")
        self.end_msg(self.env["mpirun"])
        self.env["CFGJS_mpirun"] = [self.env["mpirun"]]
        return
    _check_prog(self, "mpirun", ["mpirun"], var_prefix="CFGJS_")
    # do not use absolute path returned by _check_prog because it is
    # equivalent to "mpirun --prefix <path>" and change PATH and LD_LIBRARY_PATH
    # but extend PATH
    self.env["CFG_MPIRUNPATH"] = osp.dirname(self.env["CFGJS_mpirun"][0])
    mpirun = "mpirun"
    mpicmd = [mpirun]
    root_option = []
    if getpass.getuser() == "root":
        if self._call_cmd("Check for mpirun flag '--allow-run-as-root'",
                        [mpirun, "--allow-run-as-root", "echo"]) == 0:
            root_option.append("--allow-run-as-root")
    # store for future checkings
    self.env["base_mpirun"] = [mpirun] + root_option
    if self._call_cmd("Check for mpirun flag '-n N'",
                      self.env["base_mpirun"] + ["-n", "1", "echo"]) == 0:
        mpicmd.extend(["-n", "{mpi_nbcpu}"])
    elif self._call_cmd("Check for mpirun flag '-np N'",
                        self.env["base_mpirun"] + ["-np", "1", "echo"]) == 0:
        mpicmd.extend(["-np", "{mpi_nbcpu}"])

    for opt in ("--tag-output", "-print-rank-map", "-prepend-rank",
                "-ordered-output"):
        if self._call_cmd("Check for mpirun flag '{0}'".format(opt),
                          self.env["base_mpirun"] + [opt, "echo"]) == 0:
            mpicmd.append(opt)
    mpicmd.append("{program}")
    self.env["CFGJS_mpirun"] = [" ".join(mpicmd)]

@Configure.conf
def check_mpirun_rank(self):
    self.start_msg("Check for MPI rank variable")
    if self.env["mpirun_rank"]:
        self.end_msg(self.env["mpirun_rank"])
        self.env["CFGJS_mpirun_rank"] = [self.env["mpirun_rank"]]
        return
    # default to openmpi
    out = self.cmd_and_log(self.env["base_mpirun"] + ["env"])
    rank_id = "echo ${OMPI_COMM_WORLD_RANK}"
    if "PMI_RANK" in out:
        rank_id = "echo ${PMI_RANK}"
    self.env["CFGJS_mpirun_rank"] = [rank_id]
    self.end_msg(self.env["CFGJS_mpirun_rank"][0])

@Configure.conf
def _call_cmd(self, msg, cmd):
    self.start_msg(msg)
    try:
        ret = self.exec_command(cmd)
    except Errors.WafError:
        ret = 1
    if ret == 0:
        self.end_msg("yes")
    else:
        self.end_msg("no", "yellow")
    return ret

@Configure.conf
def check_external_programs(self):
    _check_prog(self, 'gmsh', ['gmsh'],
                mandatory=self.options.with_prog_gmsh,
                add_paths=['${GMSH_BIN_DIR}'])

    _check_prog(self, 'salome', ['salome'],
                mandatory=self.options.with_prog_salome,
                add_paths=['${ABSOLUTE_APPLI_PATH}'])

    _check_prog(self, 'run_miss3d', ['run_miss3d'],
                mandatory=self.options.with_prog_run_miss3d,
                add_paths=['${MISS3D_DIR}'])

    _check_prog(self, 'homard', ['homard'],
                mandatory=self.options.with_prog_homard,
                add_paths=[osp.join('${HOMARD_ASTER_ROOT_DIR}', 'ASTER_HOMARD')])

    _check_prog(self, 'ecrevisse', ['ecrevisse'],
                mandatory=self.options.with_prog_ecrevisse,
                add_paths=['${ECREVISSE_ROOT_DIR}'])

    mfront = 'mfront' + self.env.TFELSUFFIX
    _check_prog(self, 'mfront', [mfront],
                mandatory=self.options.with_prog_mfront,
                add_paths=['${MFRONT_ROOT_DIR}'])

    _check_prog(self, 'xmgrace', ['xmgrace'],
                mandatory=self.options.with_prog_xmgrace)
    _check_prog(self, 'gracebat', ['gracebat'],
                mandatory=self.options.with_prog_gracebat)

    _check_prog(self, 'mdump', ['mdump'],
                mandatory=self.options.with_prog_mdump)

    dict_ext = self._extract_keys("PROG_")
    self.env['EXTERNAL_PROGRAMS'] = dict_ext


@Configure.conf
def _extract_keys(self, var_prefix):
    extr = {}
    for key in list(self.env.keys()):
        if not key.startswith(var_prefix):
            continue
        prog = re.sub('^' + var_prefix, '', key)
        extr[prog] = self.env[key][0]
    return extr


def _check_prog(self, name, programs, mandatory=True, add_paths=None,
                var_prefix="PROG_"):
    """Search for the first available program from 'programs'."""
    opts = self.options
    paths0 = self.environ.get('PATH', '').split(os.pathsep)
    paths1 = [i for i in paths0 if 'outils' not in i]
    # try first without 'outils' in $PATH
    to_check = [paths1, paths0]
    add_paths = [osp.expandvars(i) for i in add_paths or []]

    while to_check:
        success = False
        paths = to_check.pop(0)
        for prog in programs:
            try:
                self.find_program(prog, var=var_prefix + name,
                                  path_list=add_paths + paths)
                success = True
                break
            except Errors.ConfigurationError:
                pass
        if success:
            break
    if not success and mandatory:
        raise Errors.ConfigurationError("not found in $PATH: {0}"
                                        .format(programs))
